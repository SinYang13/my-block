<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Announcements</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Vue 3 -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script type="module" src="../db/announcementsCRUD.js"></script>
    <link rel="stylesheet" href="../assets/css/fontawesome.css">
    <link rel="stylesheet" href="../assets/css/templatemo-villa-agency.css">
    <link rel="stylesheet" href="../assets/css/owl.css">
    <link rel="stylesheet" href="../assets/css/animate.css">
    <link rel="stylesheet" href="https://unpkg.com/swiper@7/swiper-bundle.min.css" />
    <style>
        .dashboard-container {
            display: flex;
            flex-direction: column;
            height: 80vh;
        }

        @media (min-width: 992px) {
            .dashboard-container {
                flex-direction: row;
            }
        }

        .dashboard-menu {
            width: 100%;
            background-color: #f8f9fa;
            padding: 20px;
        }

        @media (min-width: 992px) {
            .dashboard-menu {
                width: 20%;
            }
        }

        .dashboard-visualization {
            width: 100%;
            padding-left: 20px;
            padding-right: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        @media (min-width: 992px) {
            .dashboard-visualization {
                width: 80%;
            }
        }

        .dashboard-menu ul {
            list-style-type: none;
            padding: 0;
        }

        .dashboard-menu ul li {
            margin-bottom: 15px;
        }

        .dashboard-menu ul li a {
            text-decoration: none;
            color: #333;
            font-weight: bold;
        }

        .visualization-tile {
            background-color: #e9ecef;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow-y: auto;
        }

        .visualization-tile.small {
            height: 30%;
            padding: 10px;
        }

        .visualization-tile.large {
            height: 70%;
            flex-direction: column;
            align-items: flex-start;
            padding: 20px;
        }

        .visitor-count {
            font-size: 2em;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .card-body {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            width: 100%;
        }

        .card-title {
            margin-top: 20px;
        }

        .line-chart {
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div class="sub-header" style="background-color: rgb(248, 208, 208);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-md-8">
                    <ul class="info">
                        <li>Admin Dashboard</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    </div>

    <!-- Header Area Start -->
    <header class="header-area header-sticky">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <nav class="main-nav">
                        <a href="../admin.html" class="logo">
                            <h1>
                                <span>
                                    <inline>MyBlock</inline>
                                </span>
                            </h1>
                        </a>
                        <ul class="nav">
                            <li><a href="../index.html">Home</a></li>
                            <li id="profileLink">
                                <a href="../profile.html" id="profileLinkRedir">
                                    <i class="fa fa-calendar" id="profileLinkImg"></i>
                                    <span id="profileLinkText">Profile</span>
                                </a>
                            </li>
                        </ul>
                        <a class="menu-trigger"><span>Menu</span></a>
                    </nav>
                </div>
            </div>
        </div>
    </header>


    <div id="app">
        <div class="dashboard-container">
            <div class="dashboard-menu">
                <ul>
                    <li><a href="announcements.html">Announcements</a></li>
                    <li><a href="events.html">Events</a></li>
                    <li><a href="forum.html">Forum</a></li>
                    <li><a href="loans.html">Loans</a></li>
                </ul>
            </div>
            <div class="dashboard-visualization">
                <div class="visualization-tile small">
                    <form id="createAnnouncementForm">
                        <div class="mb-3">
                            <label for="announcementTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="announcementTitle" v-model="announcement.title"
                                required>
                        </div>
                        <div class="mb-3">
                            <label for="announcementContent" class="form-label">Content</label>
                            <textarea class="form-control" id="announcementContent" v-model="announcement.content"
                                rows="2" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="announcementDate" class="form-label">Date</label>
                            <input type="date" class="form-control" id="announcementDate" v-model="announcement.date"
                                required>
                        </div>
                        <div class="mb-3">
                            <label for="announcementFrom" class="form-label">From</label>
                            <input type="text" class="form-control" id="announcementFrom" v-model="announcement.from"
                                required>
                        </div>
                        <div class="mb-3">
                            <label for="announcementImg" class="form-label">Image</label>
                            <input type="file" class="form-control" id="announcementImg" @change="handleFileUpload"
                                required>
                        </div>
                        <div class="mb-3">
                            <label for="announcementLocation" class="form-label">Location</label>
                            <input type="text" class="form-control" id="announcementLocation"
                                v-model="announcement.location" required>
                        </div>
                        <button type="button" class="btn btn-primary" @click="handleCreateAnnouncement">Create
                            Announcement</button>
                    </form>
                </div>
                <div class="visualization-tile large">
                    <div class="row">
                        <div v-for="announcement in announcements" :key="announcement.id" class="col-12 mb-3">
                            <div class="card">
                                <div class="row g-0" style="height:100px">
                                    <div class="col-md-3">
                                        <img :src="announcement.img" class="img-fluid rounded-start"
                                            alt="Announcement Image" style="height:100px">
                                    </div>
                                    <div class="col-md-9">
                                        <div class="" style="height:100px; padding: 10px">
                                            <h5 class="">{{ announcement.title }}</h5>
                                            <p class="">{{ announcement.content }}</p>
                                            <p class=""><small class="text-muted">From: {{ announcement.from }}
                                                    | Date: {{ announcement.date }} | Location: {{ announcement.location
                                                    }}</small></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        import { readAnnouncements, createAnnouncement } from '../db/announcementsCRUD.js';
        import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-storage.js";
        const storage = getStorage();

        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    announcement: {
                        title: '',
                        content: '',
                        date: '',
                        from: '',
                        imgFile: null,
                        location: ''
                    },
                    announcements: []
                };
            },
            methods: {
                handleScroll() {
                    const scrollPosition = window.scrollY;
                    const headerHeight = document.querySelector('header').offsetHeight;
                    const headerElement = document.querySelector('header');
                    if (scrollPosition >= headerHeight) {
                        headerElement.classList.add('background-header');
                    } else {
                        headerElement.classList.remove('background-header');
                    }
                },
                handleProfileLink() {
                    const email = sessionStorage.getItem('loggedInUserEmail');
                    const userName = sessionStorage.getItem('loggedInUserName');
                    const userType = sessionStorage.getItem('loggedInUserType');
                    const profileLink = document.getElementById('profileLink');

                    if (email && userType && userName) {
                        const profileLinkRedir = document.getElementById("profileLinkRedir");
                        profileLinkRedir.setAttribute("href", "../profile.html");

                        const profileLinkImg = document.getElementById("profileLinkImg");
                        profileLinkImg.className = "fa fa-calendar";

                        const profileLinkText = document.getElementById("profileLinkText");
                        profileLinkText.textContent = "Profile";

                    } else {
                        const profileLinkRedir = document.getElementById("profileLinkRedir");
                        profileLinkRedir.setAttribute("href", "login.html");

                        const profileLinkImg = document.getElementById("profileLinkImg");
                        profileLinkImg.className = "fa fa-sign-in-alt";

                        const profileLinkText = document.getElementById("profileLinkText");
                        profileLinkText.textContent = "Login / Register";
                    }
                },
                handleFileUpload(event) {
                    this.announcement.imgFile = event.target.files[0];
                },
                async handleCreateAnnouncement() {
                    const { title, content, date, from, imgFile, location } = this.announcement;

                    if (!title || !content || !date || !from || !imgFile || !location) {
                        alert("Please fill in all fields.");
                        return;
                    }

                    // Upload the image to Firebase Storage
                    const imgRef = ref(storage, `announcements/${imgFile.name}`);
                    await uploadBytes(imgRef, imgFile);
                    const imgUrl = await getDownloadURL(imgRef);

                    const announcementData = { title, content, date, from, img: imgFile.name, location };
                    try {
                        const announcementId = await createAnnouncement(announcementData);
                        alert(`Announcement created with ID: ${announcementId}`);
                        // Clear fields after creation
                        this.announcement = {
                            title: '',
                            content: '',
                            date: '',
                            from: '',
                            imgFile: null,
                            location: ''
                        };
                        await this.loadAnnouncements();
                    } catch (error) {
                        console.error("Error creating announcement:", error);
                        alert("Failed to create announcement.");
                    }
                },
                async loadAnnouncements() {
                    try {
                        this.announcements = await readAnnouncements();
                    } catch (error) {
                        console.error("Error loading announcements:", error);
                    }
                }
            },
            async mounted() {
                this.handleProfileLink();
                window.addEventListener('scroll', this.handleScroll);
                await this.loadAnnouncements();
            }
        }).mount('#app');
    </script>
</body>

</html>